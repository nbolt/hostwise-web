ordinal = (n) ->
  s=["th","st","nd","rd"]
  v=n%100
  n+(s[(v-20)%10]||s[v]||s[0])


AppCtrl = ['$scope', '$http', '$timeout', ($scope, $http, $timeout) ->

]

TeamAuthCtrl = ['$scope', '$http', '$timeout', ($scope, $http, $timeout) ->

  $scope.posting = false
  $scope.form = { role: 'contractor' }

  $scope.signin = ->
    $http.post('/auth/signin', {
      form: $scope.form
    }).success (rsp) ->
      if rsp.success
        window.location = rsp.redirect_to
      else
        flash('failure', rsp.message)

  flash = (type, msg) ->
    angular.element('#signin .flash').removeClass('success failure').addClass(type).css('opacity', 1).text(msg)
    $timeout((->
      angular.element('#signin .flash').css('opacity', 0)
    ), 3000)

]

AuthCtrl = ['$scope', '$http', '$timeout', ($scope, $http, $timeout) ->

  $scope.posting = false
  $scope.form = { role: 'host' }

  $scope.signin = ->
    $http.post('/auth/signin', {
      form: $scope.form
    }).success (rsp) ->
      if rsp.success
        window.location = rsp.redirect_to
      else
        flash('failure', rsp.message)

  $scope.step = (n) ->
    if n < 4
      success = -> angular.element('#signup .steps').css('margin-left', -(n * 600))
    else
      success = -> $http.post('/auth/phone_confirmed', { email: $scope.form.email }).success (rsp) -> window.location = '/'
    
    unless $scope.posting
      $scope.posting = true
      $http.post('/auth/signup', {
        stage: n
        form: $scope.form
        code: $scope.confirmation_code
      }).success (rsp) ->
        $scope.posting = false
        if rsp.success
          success()
        else
          flash('failure', rsp.message)


  flash = (type, msg) ->
    angular.element('#signin .flash').removeClass('success failure').addClass(type).css('opacity', 1).text(msg)
    $timeout((->
      angular.element('#signin .flash').css('opacity', 0)
    ), 3000)

]

NewPropertyCtrl = ['$scope', '$http', '$timeout', ($scope, $http, $timeout) ->

  $scope.posting = false
  $scope.chosen_dates    = {}
  $scope.chosen_services = {}
  $scope.extras          = {}

  $http.get('/data/services').success (rsp) -> $scope.services = rsp
  $http.get('/data/payments').success (rsp) ->
    $scope.payments = rsp
    $scope.stripe_id = $scope.payments[0].stripe_id if $scope.payments[0]

  $scope.cities = ->
    {
      dropdownCssClass: 'cities'
      data: []
      initSelection: (el, cb) ->
      formatResult: (obj, container, query) -> "#{obj.text}<div class='state'>#{obj.county}, #{obj.state}</div>"
      ajax:
        url: "/data/cities"
        data: (term) -> { term: term }
        quietMillis: 400
        results: (data) -> { results: _(data).map (c) -> { id: c.id, text: c.name, state: c.state.abbr, county: c.county.name } }
    }

  $scope.bedrooms = ->
    {
      dropdownCssClass: 'details'
      minimumResultsForSearch: 8
      data: [{id:'0',text:'None'},{id:'1',text:'1 Bedroom'},{id:'2',text:'2 Bedrooms'},{id:'3',text:'3 Bedrooms'},{id:'4',text:'4 Bedrooms'}]
      initSelection: (el, cb) ->
    }

  $scope.beds = ->
    {
      dropdownCssClass: 'details'
      minimumResultsForSearch: 8
      data: [{id:'0',text:'None'},{id:'1',text:'1 Bed'},{id:'2',text:'2 Beds'},{id:'3',text:'3 Beds'},{id:'4',text:'4 Beds'}]
      initSelection: (el, cb) ->
    }

  $scope.accommodates = ->
    {
      dropdownCssClass: 'details'
      minimumResultsForSearch: 8
      data: [{id:'1',text:'1 Person'},{id:'2',text:'2 People'},{id:'3',text:'3 People'},{id:'4',text:'4 People'}]
      initSelection: (el, cb) ->
    }

  $scope.show_existing = -> if $scope.stripe_id then true  else false
  $scope.show_new      = -> if $scope.stripe_id then false else true
  $scope.show_existing_class = -> if $scope.show_existing() then 'active' else 'inactive'
  $scope.show_new_class      = -> if $scope.show_new()      then 'active' else 'inactive'

  $scope.select_payment = (id) -> $scope.stripe_id = id

  $scope.tab = (tab) ->
    switch tab
      when 'existing'
        angular.element('.existing .payment input').iCheck('uncheck')
        angular.element('.existing .payment:eq(0) input').iCheck('check')
        $scope.stripe_id = $scope.payments[0].id
      when 'new'
        $scope.stripe_id = null

  $scope.skip = (n) ->
    switch n
      when 2
        angular.element('#property-form-container .steps').css('margin-left', -(4 * 600))
        angular.element('.step-circles .step').removeClass('active').eq(4).addClass('active')
    null

  $scope.step = (n) ->
    if validate(n)
      post = ->
        unless $scope.posting
          $scope.posting = true
          $http.post('/properties/build', {
            stage: n
            form: $scope.form
            property_id: $scope.property_id
            chosen_dates: $scope.chosen_dates
            chosen_services: $scope.chosen_services
            stripe_token: $scope.stripe_token
            stripe_id: $scope.stripe_id
            extras: $scope.extras
          }).success (rsp) ->
            $scope.posting = false
            _($scope.extras).extend(rsp.extras)
            if rsp.success
              success()
              $scope.property_id = rsp.property_id
              $scope.extras = {}
            else
              flash(rsp.type || 'failure', rsp.message)

      if n < 5
        success = ->
          angular.element('#property-form-container .steps').css('margin-left', -(n * 600))
          angular.element('.step-circles .step').removeClass('active').eq(n).addClass('active')
      else
        success = -> window.location = '/'

      angular.element('.existing .payment:eq(0) input').iCheck('check') if n == 3 && $scope.stripe_id
      if n == 4 && !$scope.stripe_id
        Stripe.createToken {
          number: angular.element('.new-payment input[data-stripe=number]').val()
          cvc: angular.element('.new-payment input[data-stripe=cvc]').val()
          exp_month: angular.element('.new-payment input[data-stripe=expiry]').val().split('/')[0]
          exp_year: angular.element('.new-payment input[data-stripe=expiry]').val().split('/')[1]
        }, (_, rsp) ->
          if rsp.error
            flash 'failure', rsp.error.message
          else
            $scope.stripe_token = rsp.id
            post()
      else
        post()

  flash = (type, msg) ->
    angular.element('#property-form-container .flash').removeClass('success failure').addClass(type).css('opacity', 1).text(msg)
    $timeout((->
      angular.element('#property-form-container .flash').css('opacity', 0).removeClass('info success failure')
    ), 3000)

  validate = (n) ->
    switch n
      when 1
        step_num = 'one'
      when 2
        step_num = 'two'
      when 3
        step_num = 'three'
      when 4
        step_num = 'four'
    if _(angular.element('.step.' + step_num).find('input[required]')).filter((el) -> angular.element(el).val() == '')[0]
      flash('failure', 'Please fill in all required fields')
      false
    else
      true

]

PropertyHomeCtrl = ['$scope', '$http', '$timeout', ($scope, $http, $timeout) ->

  $http.get('/data/properties').success (rsp) -> $scope.properties = rsp

]


app = angular.module('porter', ['ngCookies', 'ui.mask', 'ui.select2'])
  .controller('app',          AppCtrl)
  .controller('auth',         AuthCtrl)
  .controller('team-auth',    TeamAuthCtrl)
  .controller('new_property', NewPropertyCtrl)
  .controller('properties',   PropertyHomeCtrl)
  .config ['$httpProvider', ($httpProvider) ->
    $httpProvider.defaults.headers.common['X-CSRF-Token'] = angular.element('meta[name=csrf-token]').attr 'content'
  ]
  .directive('icheckPayment', [-> (scope, element, attrs) ->
    element.iCheck
      checkboxClass: "icheckbox_square-#{attrs.icheckPayment}"
      radioClass: "iradio_square-#{attrs.icheckPayment}"

    element.on 'ifChecked', ->
      scope.select_payment element.val()
  ])
  .directive('toggleService', [-> (scope, element, attrs) ->
    element.on('click', ->
      element.addClass('selecting')
      if ( element.hasClass('active') )
        delete scope.chosen_services[element.text()]
        element.removeClass('active')
      else
        scope.chosen_services[element.text()] = attrs.sid
        element.addClass('active')
      element.on('mouseleave.selecting', ->
        element.off('mouseleave.selecting')
        element.removeClass('selecting')
      )
    )
  ])
  .directive('calendar', [->
    link: (scope, element) ->
      days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
      months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
      _month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
      scope.chosen_dates = {}
      
      gen_cal = (cal, month, year) ->
        calendar = element.find('table')
        calendar.find('thead th.month').attr('month', month)
        calendar.find('thead th.month').attr('year', year)
        first_day = new Date(year, month, 1).getDay()
        month_name = months[month]
        month_days = _month_days[month]
        month_days = if month == 1 && (year % 4 == 0 && year % 100 != 0 || year % 400 == 0) then 29 else month_days
        prev_month_days = if month == 0 then _month_days[11] else _month_days[month-1]
        prev_month_days = if month == 2 && (year % 4 == 0 && year % 100 != 0 || year % 400 == 0) then 29 else prev_month_days
        num_rows = if month_days + first_day > 35 then 6 else if first_day == 0 && month_days == 28 then 4 else 5

        calendar.find('tbody').remove()
        calendar.find('thead').after('<tbody></tbody>')
        calendar.find('.month_header th.month').text(month_name + ' ' + year)

        current_day = 0
        for row in [1..6]
          calendar.find('tbody').append('<tr class="week">')
          for day, i in days
            day = (current_day + 1) + '-' + month + '-' + year
            html = '<td ' +
              (if row == 1 && i < first_day
                'class="inactive day">' + (prev_month_days - ((first_day-1) - i))
               else if current_day >= month_days
                ++current_day
                'class="inactive day">' + (current_day - month_days)
               else if moment().diff(new Date(year, month, current_day), 'days') > 0
                ++current_day
                'class="past day">' + current_day
               else
                 ++current_day
                 'day="' + current_day + '" month="' + month + '" year="' + year + '" class="active day">' + current_day) + '</td>'
            calendar.find('tbody').append html
          calendar.find('tbody').append '</tr>'

        key = "#{month}-#{year}"
        _(scope.chosen_dates[key]).each (day) ->
          calendar.find("td.day.active[day='#{day}']").addClass('chosen')

      gen_cals = (dir) ->
        if dir is 'prev'
          scope.month = scope.month == 0 && 11 || scope.month-1
          scope.year = scope.month == 11 && scope.year-1 || scope.year
        else if dir is 'next'
          scope.month = if scope.month == 11 then 0 else scope.month+1
          scope.year = scope.month == 0 && scope.year+1 || scope.year
        else
          scope.month = moment().month()
          scope.year = moment().year()
        gen_cal(0, scope.month, scope.year)

      gen_cals()

      element.find('.arrow.prev').click -> gen_cals 'prev'
      element.find('.arrow.next').click -> gen_cals 'next'

      element.on('click', 'td.active', ->
        $this = angular.element(@)
        $this.addClass('selecting')
        $this.on('mouseleave.selecting', ->
          $this.off('mouseleave.selecting')
          $this.removeClass('selecting')
          key = "#{$this.attr('month')}-#{$this.attr('year')}"
          if $this.hasClass('chosen')
            $this.removeClass('chosen')
            scope.chosen_dates[key] = scope.chosen_dates[key].filter (d) -> d != $this.attr('day')
          else
            $this.addClass('chosen')
            scope.chosen_dates[key] = [] unless scope.chosen_dates[key] && scope.chosen_dates[key][0]
            scope.chosen_dates[key].push $this.attr('day')
        )
      )


    restrict: 'E'
    template: "
      <div class='arrows'>
        <div class='arrow prev'><div class='typcn'></div></div>
        <div class='arrow next'><div class='typcn'></div></div>
      </div>
      <div class='table'>
        <table>
          <thead>
            <tr class='month_header'>
              <th class='month' colspan='7'></th>
          </thead>
          <tbody></tbody>
        </table>
      </div>
    "
  ])

angular.element(document).on 'ready page:load', -> angular.bootstrap('body', ['porter'])