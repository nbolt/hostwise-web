JobsCtrl = ['$scope', '$http', '$timeout', '$interval', '$window', '$q', 'spinner', 'ngDialog', ($scope, $http, $timeout, $interval, $window, $q, spinner, ngDialog) ->

  $scope.tabs = [{name:'open'},{name:'upcoming'},{name:'past'}]
  $scope.filter = {id:'recent',text:'Most Recent'}
  $scope.page = 1
  $scope.jobs_fetched = $q.defer()
  faye = null

  $scope.tab = (name) ->
    angular.element('#jobs .tabs .tab').removeClass 'active'
    angular.element('#jobs .tab-content .tab').removeClass 'active'
    angular.element("#jobs .tabs .tab.#{name}").addClass 'active'
    angular.element("#jobs .tab-content .tab.#{name}").addClass 'active'
    null

  $scope.filters = ->
    {
      dropdownCssClass: 'details'
      minimumResultsForSearch: -1
      data: [{id:'recent',text:'Most Recent'}]
      initSelection: (el, cb) ->
    }

  $scope.confirm_claim = (job, day) ->
    $scope.selected_job = job
    $scope.selected_day = day
    ngDialog.open template: 'claim-job-modal', className: 'claim full', scope: $scope

  $scope.close_modal = ->
    ngDialog.closeAll()

  $scope.claim = (job, day) ->
    spinner.startSpin()
    $http.post("/jobs/#{job.id}/claim").success (rsp) ->
      $http.get("/data/refresh_day?id=#{job.id}").success (_rsp) ->
        spinner.stopSpin()
        element = angular.element("#day-#{day[0]}")
        $scope.close_modal()
        if rsp.success
          _rsp.unshift job if _rsp[0]
          day[1] = _rsp
          angular.element("#job-#{job.id}").addClass 'claimed'
          refresh_claimed()
        else
          angular.element("#job-#{job.id} .flash").css('opacity', 1).text rsp.message
          $timeout((-> angular.element("#job-#{job.id}").fadeOut()), 4000)

  $scope.drop = (job) ->
    $http.post("/jobs/#{job.id}/drop").success (rsp) ->
      if rsp.success
        angular.element("#job-#{job.id}").fadeOut()
      else
        refresh_jobs()

  $scope.goto = (job_id) ->
    window.location = "/jobs/#{job_id}"

  $scope.pricing_class = (job) ->
    if job.staging
      'staging'
    else if job.state_cd is 1
      'vip'
    else
      ''

  $scope.goto_page = (page) -> $scope.page = page

  $scope.num_class = (n) -> if n == $scope.page then 'active' else ''

  $scope.range = (n) -> if n then _.range 0, n else []

  refresh_claimed = ->
    $http.get("/data/jobs", {params: {scope: 'upcoming', sort: $scope.filter.id}}).success (rsp) ->
      tab = _($scope.tabs).find (tab) -> tab.name == 'upcoming'
      tab.days = rsp
      tab.count = _(tab.days).reduce(((acc, day) -> acc + day[1].length), 0)
      _(tab.days).each (day) ->
        day.push {}
        date = moment.utc(day[0],"MM-DD-YY")
        date_text = date.format("ddd, MMM D")
        if date.month() == moment().month()
          if date.date() == moment().date()
            date_text += ', Today'
          else if date.date() == moment().date() + 1
            date_text += ', Tomorrow'
        day[2].date_text = date_text

  refresh_jobs = (append, cb) ->
    $scope.user_fetched.promise.then ->
      _($scope.tabs).each (tab) ->
        $http.get("/data/jobs?page=#{$scope.page}", {params: {scope: tab.name, sort: $scope.filter.id}}).success (rsp) ->
          if tab.name == 'open'
            $scope.jobs_count = rsp.meta.jobs_count
            angular.element('.tab-content .tab:eq(0)').addClass 'active' if !tab.day
          jobs = rsp.jobs
          days = _(rsp.jobs).groupBy 'date'
          days = _(days).map (v,k) -> [k, v]
          _(days).each (day) -> day[1] = _(day[1]).sortBy (job) -> job.priority if tab.name == 'upcoming'

          _(days).each (day) ->
            day.push {}
            date = moment.utc(day[0],"YYYY-MM-DD")
            date_text = date.format("ddd, MMM D")
            if date.month() == moment().month()
              if date.date() == moment().date()
                date_text += ', Today'
              else if date.date() == moment().date() + 1
                date_text += ', Tomorrow'
            day[2].date_text = date_text


          if append && tab.name == 'open'
            tab.days = tab.days.concat days
          else
            tab.days = days
          tab.count = _(tab.days).reduce(((acc, day) -> acc + day[1].length), 0)

          cb() if cb
          $timeout((-> $scope.jobs_fetched.resolve()),5000)

  $scope.$watch 'filter', (n,o) -> if o
    refresh_jobs()

  $scope.jobs_fetched.promise.then ->
    angular.element('.tab-content .tab.open').infiniteScrollHelper
      loadMore: (page, done) ->
        spinner.startSpin()
        $scope.page = page
        refresh_jobs true, (-> spinner.stopSpin(); done())

  #load_faye = null
  #load_faye = $interval((->
  #  if $window.faye_loaded
  #    $interval.cancel(load_faye)
  #    faye = new Faye.Client "https://pubsub.fanout.io/r/<%= ENV['FANOUT_ID'] %>/bayeux"
  #    faye.subscribe '/jobs', (data) -> refresh_jobs()
  #), 200)

]

app = angular.module('porter').controller('jobs', JobsCtrl)
